# This is a configuration file for IceNLPServer.
# create a copy of this file and start the server
# with: java -jar IceNLPServer -c=config-file

# host: allows you to bind specific ip address / host
# that the server will use.
host = "0.0.0.0"

# port: allows you to bind specific port instead of
# of the default (1234).
port = "1234"

# The maximum queue length for incoming connection indications 
# (a request to connect) is set to the backlog parameter. If a 
# connection indication arrives when the queue is full, the 
# connection is refused.
backlogSize = "8000"

# IceLexiconDir: points to the IceTagger lexicon folder.
# This folder can be found in dict/icetagger in the
# root folder of the IceNLP project. By default this
# folder will be loaded from the IceNLP library.
#IceLexiconsDir = "/home/src/icenlp/core/dict/icetagger"

# tokenizerLexicon: points to the tokenizer lexicon file.
# This file can be found at dict/tokenizer/lexicon.txt
#tokenizerlexicon = "/home/src/icenlp/dict/tokenizer/lexicon.txt"

# TaggingOutputFormat: allows you to changes the tagging 
# output that the server sends out. Possible items that can 
# be used within this setting is [LEXEME], [LEMMA], [TAG] 
# and [FUNC]. These label will be replaced with the results 
# of the analysis. Default setting is "[LEXEME] [TAG] ". 
# examples:
#TaggingOutputFormat = "[LEXEME ([LEMMA]):[TAG] "
TaggingOutputFormat = "[LEXEME] [TAG] "

# These two are used for external morpho formatting
UnknownOutputformat = "^[LEXEME]/*[LEMMA]$"
SpaceOutputformat = "^[LEXEME]/[LEXEME]$"

# PunctuationSeparator allows you to change the separator
# between the tagging result and the previous tagging result
# if the second word is annotated as linked word.
# By default the value for this is " ".
PunctuationSeparator = " "

# TaggingOutputSparator allows you to change the separator
# between the tagging result and the previous tagging result
# if the previous word is not annotated as a linked word.
# By default the value for this is " ".
TaggingOutputSparator = " "

# If this flag is enabled then blocks that appear in the input
# text will appear in the output. This overrides the Tagging-
# OutputSeperator.
UserIceTaggerWhitespaceBlocks = "true"

# MappingLexicon points to a mapping file that conaints rules
# for mapping from IDF tagset to another tagset.
# If this setting is not set then no mapping will be done. 
#MappingLexicon = "icenlp"

# leave_not_found_unchanged allows to changed what happens
# when mapper does not find mapping for a given tag.
# If set to "false" then the server will either changed the tag 
# to unfound_tag or use the default unfound_tag, which is <NOT MAPPED>.
# If set to "true" then the original tag will be used unchanged.
leave_not_found_tag_unchanged = "false"

# leave_lexemes_of_length_one_unchanged is a setting that is needed
# when the server is used with Apertium. If this setting is set to
# true, then unknown lexemes of length one are sent out to the output
# withouth taggin, thus only the lexeme is placed in the output.
leave_lexemes_of_length_one_unchanged = "true"

# unfound_tag allows to change the tag used when tag is not found
# in tag mapping. This value will be used as the tag if the value
# leave_not_found_tag_unchanged is set to "false". The default
# value for this variable is <NOT MAPPED>.
unfound_tag = ""

# TriTaggerLexicon points to the model folder for the the
# tritagger. This folder can be found at ngrams/models in
# the root of the IceNLP project.
#TritaggerLexicon = "~/icenlp/ngrams/models/"

# Tritagger allows to enable Trigram tagging with IceTagger.
# By default this is false.
Tritagger = "true"

# Sets what external morpho analyser to use.
# Two options are avalable. IceNLP and Apertium (all lower case when used)
#
# When Apertium is used, it assumes the input is from the
# Apertium Morpho Analyser (lt-proc) and processes that.
ExternalMorpho = "icenlp"

# True, it will leave proper nouns alone
# False, it will change all proper nouns to be of the same type
# 
# For example, "Jón" will be changed from -m to -s if set to false (<ant> to <al> in apertium)
named_entity_recognition = "false"

# Debug output allows to enable output during the exectuion
# of the server.
debug = "false"

#compiled_bidix = "/home/hs01/temp/is-en.autobil.bin"
#compiled_bidix = "/usr/local/applications/apertium/apertium-is-en/is-en.autobil.bin"
#compiled_bidix = "/home/hrafn/nlp/apertium/trunk/apertium-is-en/is-en.autobil.bin"
#compiled_bidix = "/home/martha/src/apertium-is-en/is-en.autobil.bin"

# The next following lines are markes for the IceParser output.
mark_subject_left = "<@←SUBJ>"
mark_subject_right = "<@SUBJ→>"
mark_obj_left = "<@←OBJ>"
mark_obj_right = "<@OBJ→>"

# IceParserOutput can be "txt", "ppl", "xml", "tcf", "json", or "alt".
# txt: plain text output with one sentence per line 
# ppl: plain text output with one phrase/function per line
# xml: A specific XML output
# tcf: Text Corpus Format output
# json: Java Script Objenct Notation format
# alt: allows alternating between the above formats, according to the start of the string being submitted. The string is prefixed with "["txt|ppl|xml|tcf|json|alt"]", for example: "[txt]Hann er kennari"
# DO NOT USE APERTIUM IF IceParserOutput IS SET TO "alt"
# if "alt" is selected it automatically initiates the lemmatizer due to the error detection (error detection has to be activated by a commandline argument)
# If IceParserOutput is not specified (e.g. the following line commented out), then the server only returns tagged output
IceParserOutput = "ppl"
